/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.mailingsystem.view;

import edu.ijse.mailingsystem.connector.ServerConnector;
import edu.ijse.mailingsystem.controller.MailController;
import edu.ijse.mailingsystem.controller.UserController;
import edu.ijse.mailingsystem.dto.MailDTO;
import edu.ijse.mailingsystem.dto.UserDTO;
import edu.ijse.mailingsystem.observer.Observer;
import edu.ijse.mailingsystem.observer.Subject;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;

/**
 *
 * @author Dulan
 */
public class HomePage extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form HomePage
     */
    String userName;
    int timeRun = 0;
    ArrayList<Object> checkBoxs = new ArrayList<>();
    ArrayList<Object> fromLables = new ArrayList<>();
    ArrayList<Object> topicLables = new ArrayList<>();
    ArrayList<Object> attachmentLabels = new ArrayList<>();
    ArrayList<Object> mailSentDateLabels = new ArrayList<>();

    public HomePage() {
        initComponents();
        this.userName = userName;
        userNameLable.setText(userName);
        setDate();
        getClock();
    }

    public HomePage(String userName) {
        initComponents();
        this.userName = userName;
        userNameLable.setText(userName);
        setDate();
        getClock();
        getInboxMails();

        try {
            UnicastRemoteObject.exportObject(this, 0);
        } catch (RemoteException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Subject subject = (Subject) ServerConnector.getServerConnector().getMailController();
            subject.registerObsever(this);
            subject = (Subject) ServerConnector.getServerConnector().getUserController();
            subject.registerObsever(this);
        } catch (NotBoundException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        composeButton = new javax.swing.JButton();
        inboxLabel = new javax.swing.JLabel();
        sentMailLabel = new javax.swing.JLabel();
        draftLabel = new javax.swing.JLabel();
        topPanel = new javax.swing.JPanel();
        date = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        nowInLabel = new javax.swing.JLabel();
        composeMailPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userNameLable = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        nextLabel = new javax.swing.JLabel();
        backLabel = new javax.swing.JLabel();
        settingsLabel = new javax.swing.JLabel();
        minimizeLabel = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();
        leftSidePanel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setOpaque(false);

        composeButton.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        composeButton.setText("COMPOSE");
        composeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composeButtonActionPerformed(evt);
            }
        });

        inboxLabel.setFont(new java.awt.Font("Georgia", 2, 18)); // NOI18N
        inboxLabel.setText("Inbox");
        inboxLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inboxLabelMouseClicked(evt);
            }
        });

        sentMailLabel.setFont(new java.awt.Font("Georgia", 2, 18)); // NOI18N
        sentMailLabel.setText("Sent Mail");
        sentMailLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sentMailLabelMouseClicked(evt);
            }
        });

        draftLabel.setFont(new java.awt.Font("Georgia", 2, 18)); // NOI18N
        draftLabel.setText("Draft");
        draftLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                draftLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(composeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(draftLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sentMailLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inboxLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(composeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(inboxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sentMailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(draftLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(312, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 200, 580));

        topPanel.setOpaque(false);

        date.setFont(new java.awt.Font("Time", 1, 24)); // NOI18N
        date.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        date.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        timeLabel.setFont(new java.awt.Font("Time", 1, 24)); // NOI18N
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        nowInLabel.setFont(new java.awt.Font("MV Boli", 1, 24)); // NOI18N
        nowInLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nowInLabel.setText("Sent Mail");

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(nowInLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 722, Short.MAX_VALUE)
                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(timeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(topPanelLayout.createSequentialGroup()
                .addComponent(nowInLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(topPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 1360, 50));

        composeMailPanel.setOpaque(false);

        javax.swing.GroupLayout composeMailPanelLayout = new javax.swing.GroupLayout(composeMailPanel);
        composeMailPanel.setLayout(composeMailPanelLayout);
        composeMailPanelLayout.setHorizontalGroup(
            composeMailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );
        composeMailPanelLayout.setVerticalGroup(
            composeMailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
        );

        getContentPane().add(composeMailPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 190, 610, 570));

        mainPanel.setOpaque(false);
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 230, 1160, 520));

        jPanel2.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Lucida Bright", 3, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 255, 255));
        jLabel1.setText("Welcome Back ");

        userNameLable.setFont(new java.awt.Font("Lucida Bright", 3, 30)); // NOI18N
        userNameLable.setForeground(new java.awt.Color(153, 255, 255));
        userNameLable.setText("Freedom_Fighter");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(userNameLable, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(584, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addComponent(userNameLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 1360, 40));

        jPanel3.setOpaque(false);

        refreshButton.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\007327-blue-jelly-icon-arrows-.png")); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        nextLabel.setFont(new java.awt.Font("Iskoola Pota", 1, 20)); // NOI18N
        nextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nextLabel.setText(">>");
        nextLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        backLabel.setFont(new java.awt.Font("Iskoola Pota", 1, 20)); // NOI18N
        backLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backLabel.setText("<<");
        backLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        settingsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        settingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        settingsLabel.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\setting (1).png")); // NOI18N
        settingsLabel.setText("User Settings");
        settingsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                settingsLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 772, Short.MAX_VALUE)
                .addComponent(backLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(nextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(settingsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(settingsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, 1110, 50));

        minimizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minimizeLabel.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\106591-3d-glossy-orange-orb-ic.png")); // NOI18N
        minimizeLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        minimizeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeLabelMouseClicked(evt);
            }
        });
        getContentPane().add(minimizeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 10, 44, 40));

        closeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        closeLabel.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\aaa.png")); // NOI18N
        closeLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
        });
        getContentPane().add(closeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 10, 44, 40));

        leftSidePanel.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\721365131392-5141-wallpapers-a.jpg")); // NOI18N
        getContentPane().add(leftSidePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void composeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_composeButtonActionPerformed
        String systemDate = date.getText();
        String systemTime = timeLabel.getText();
        ComposedMail composedMail = new ComposedMail(userName, systemDate, systemTime);
        composeMailPanel.removeAll();
        composedMail.setSize(composeMailPanel.getSize());
        composeMailPanel.add(composedMail);
        composeMailPanel.repaint();
        composeMailPanel.revalidate();
    }//GEN-LAST:event_composeButtonActionPerformed

    private void minimizeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeLabelMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_minimizeLabelMouseClicked

    private void inboxLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inboxLabelMouseClicked
        try {
            nowInLabel.setText("Inbox");
            mainPanel.removeAll();
            MailController mailController = ServerConnector.getServerConnector().getMailController();

            ArrayList<MailDTO> allaInboxMails = mailController.viewAllMailsToInbox(userName, "Inbox", "InboxFIle.txt");
            setToLables(allaInboxMails);
        } catch (NotBoundException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_inboxLabelMouseClicked

    private void sentMailLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sentMailLabelMouseClicked
        try {
            nowInLabel.setText("Sent Mail");
            mainPanel.removeAll();
            MailController mailController = ServerConnector.getServerConnector().getMailController();

            ArrayList<MailDTO> allaSentMails = mailController.viewAllMails(userName, "Sent", "SentFile.txt");
            System.out.println("aaaaaaaa");
            setSentAndDraft(allaSentMails);
        } catch (NotBoundException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sentMailLabelMouseClicked

    private void draftLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_draftLabelMouseClicked
        try {
            nowInLabel.setText("Draft Mail");
            mainPanel.removeAll();
            MailController mailController = ServerConnector.getServerConnector().getMailController();

            ArrayList<MailDTO> allaDraftMails = mailController.viewAllMails(userName, "Draft", "DraftFile.txt");
            setSentAndDraft(allaDraftMails);
        } catch (NotBoundException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_draftLabelMouseClicked

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        if (nowInLabel.getText().equals("Inbox")) {
            try {
                nowInLabel.setText("Inbox");
                mainPanel.removeAll();
                MailController mailController = ServerConnector.getServerConnector().getMailController();

                ArrayList<MailDTO> allaInboxMails = mailController.viewAllMailsToInbox(userName, "Inbox", "InboxFile.txt");
                setToLables(allaInboxMails);
            } catch (NotBoundException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (nowInLabel.getText().equals("Sent Mail")) {
            try {
                nowInLabel.setText("Sent Mail");
                mainPanel.removeAll();
                MailController mailController = ServerConnector.getServerConnector().getMailController();

                ArrayList<MailDTO> allaSentMails = mailController.viewAllMails(userName, "Sent", "SentFile.txt");
                setSentAndDraft(allaSentMails);
            } catch (NotBoundException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                nowInLabel.setText("Draft Mail");
                mainPanel.removeAll();
                MailController mailController = ServerConnector.getServerConnector().getMailController();

                ArrayList<MailDTO> allaDraftMails = mailController.viewAllMails(userName, "Draft", "DraftFile.txt");
                setSentAndDraft(allaDraftMails);
            } catch (NotBoundException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void settingsLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsLabelMouseClicked
        UserController userController = null;
        try {
            userController = ServerConnector.getServerConnector().getUserController();
        } catch (NotBoundException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            UserDTO user = userController.searchUser(userName);
            boolean isPasswordOK = logInToUserSettings(user.getUserPassword());
            if (isPasswordOK) {
                new LogInToUserSetting(user).setVisible(true);
            }

        } catch (IOException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_settingsLabelMouseClicked

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
        int confirm = JOptionPane.showConfirmDialog(null, "Are you want to Sign Out...");
        if (confirm == 0) {
            try {
                UserController userController = ServerConnector.getServerConnector().getUserController();
                boolean isReleased = userController.releaseUser(userName);
                if (isReleased) {
                    this.dispose();
                }
            } catch (NotBoundException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_closeLabelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backLabel;
    private javax.swing.JLabel closeLabel;
    private javax.swing.JButton composeButton;
    private javax.swing.JPanel composeMailPanel;
    private javax.swing.JLabel date;
    private javax.swing.JLabel draftLabel;
    private javax.swing.JLabel inboxLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel leftSidePanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel minimizeLabel;
    private javax.swing.JLabel nextLabel;
    private javax.swing.JLabel nowInLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel sentMailLabel;
    private javax.swing.JLabel settingsLabel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel userNameLable;
    // End of variables declaration//GEN-END:variables

    private void setDate() {
        Date d1 = new Date(); //Current System date
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        String sDate = df.format(cal.getTime());
        date.setText(sDate);
    }

    private void getClock() {
        new Thread() {
            public void run() {
                while (timeRun == 0) {
                    Calendar calender = new GregorianCalendar();
                    int hour = calender.get(Calendar.HOUR);
                    int min = calender.get(Calendar.MINUTE);
                    int sec = calender.get(Calendar.SECOND);
                    int AM_PM = calender.get(Calendar.AM_PM);

                    String day_night = "";
                    if (AM_PM == 1) {
                        day_night = "PM";
                    } else {
                        day_night = "AM";
                    }
                    String time = hour + ":" + min + ":" + sec + " " + day_night;

                    timeLabel.setText(time);
                }
            }
        }.start();
    }

    private void setToLables(ArrayList<MailDTO> allMails) {
        int count = 1;
        int multiply = 0;
//        int y = 20;
//        int mailCount = allMails.size();
//        if (mailCount>0) {
//            fromLabel1.setText();
//            topicLabel1.setText();
//            attachmentLabel1.setText();
//            mailSentDateLabel1.setText();
//        }
        if (allMails.isEmpty()) {
            JLabel label = new JLabel();
            label.setVisible(true);
            label.setOpaque(false);
            label.setFont(new java.awt.Font("Lucida Bright", 3, 19));
//            label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setText(" ooops... You have no INBOX Mails... ");
            mainPanel.setLayout(null);
            label.setBounds(10, 190, 1140, 70);
            mainPanel.add(label);
            mainPanel.repaint();
        } else {
            for (MailDTO allMail : allMails) {
//        for (int i = 0; i < 10; i++) {
                if (allMail.getIfNewMail().equals("NewMail")) {
                    if (count <= 10) {
                        int y = 20 + 48 * multiply;
                        JCheckBox checkBox = new JCheckBox();
                        checkBox.setVisible(true);
                        checkBox.setText(allMail.getMailID());
                        mainPanel.setLayout(null);
                        checkBox.setBounds(10, y, 30, 30);
                        mainPanel.add(checkBox);
                        mainPanel.repaint();
                        checkBoxs.add(checkBox);
                        checkBox.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                if (checkBox.isSelected()) {
                                    int confirm = JOptionPane.showConfirmDialog(null, "Are you want to delete this Message??...");
                                    if (confirm == 0) {
                                        MailController mailController = null;
                                        try {
                                            mailController = ServerConnector.getServerConnector().getMailController();
                                        } catch (NotBoundException ex) {
                                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                        } catch (MalformedURLException ex) {
                                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                        } catch (RemoteException ex) {
                                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                        } catch (IOException ex) {
                                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                        }

                                        try {
                                            boolean deleteMail = mailController.deleteMail("Inbox", userName, allMail.getMailID());
                                            if (deleteMail) {
                                                System.out.println("mail Deleted");
                                                JOptionPane.showMessageDialog(null, "Mail Deleted...");
                                                refreshButton.doClick();
                                            }
                                        } catch (IOException ex) {
                                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                        } catch (NotBoundException ex) {
                                            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }
                            }
                        });

                        JLabel label = new JLabel();
                        label.setVisible(true);
                        label.setOpaque(false);
                        label.setFont(new java.awt.Font("Tahoma", 1, 14));
                        label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        label.setText(" " + allMail.getSenderName());
                        mainPanel.setLayout(null);
                        label.setBounds(53, y, 229, 30);
                        mainPanel.add(label);
                        mainPanel.repaint();
                        label.addMouseListener(new java.awt.event.MouseAdapter() {
                            public void mouseClicked(java.awt.event.MouseEvent evt) {
                                InboxMail inboxMail = new InboxMail(allMail, userNameLable.getText());
                                composeMailPanel.removeAll();
                                inboxMail.setSize(composeMailPanel.getSize());
                                composeMailPanel.add(inboxMail);
                                composeMailPanel.repaint();
                                composeMailPanel.revalidate();
                            }
                        });

                        JLabel label2 = new JLabel();
                        label2.setVisible(true);
                        label2.setOpaque(false);
                        label2.setFont(new java.awt.Font("Tahoma", 1, 14));
                        label2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        label2.setText(" " + allMail.getMailTopic());
                        mainPanel.setLayout(null);
                        label2.setBounds(300, y, 580, 30);
                        mainPanel.add(label2);
                        mainPanel.repaint();

                        JLabel label3 = new JLabel();

                        label3.setOpaque(false);
                        label3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        label3.setFont(new java.awt.Font("Tahoma", 1, 14));
                        label3.setVisible(false);
//                label3.setText(" " + allMail.getAttachmentPath());
                        label3.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\gmail-attachment-icons-128--1-.png")); // NOI18N
                        label3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        if (!allMail.getAttachmentPath().equals("")) {
                            label3.setVisible(true);
                        }
                        mainPanel.setLayout(null);
                        label3.setBounds(898, y, 62, 30);
                        mainPanel.add(label3);
                        mainPanel.repaint();

                        JLabel label4 = new JLabel();
                        label4.setVisible(true);
                        label4.setOpaque(false);
                        label4.setFont(new java.awt.Font("Tahoma", 1, 14));
                        label4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        label4.setText(" " + allMail.getMailSentDate());
                        mainPanel.setLayout(null);
                        label4.setBounds(978, y, 172, 30);
                        mainPanel.add(label4);
                        mainPanel.repaint();

                        count++;
                        multiply++;
                    }
                } else if (count <= 10) {
                    int y = 20 + 48 * multiply;
                    JCheckBox checkBox = new JCheckBox();
                    checkBox.setVisible(true);
//                checkBox.setText(allMail.getMailID());
                    mainPanel.setLayout(null);
                    checkBox.setBounds(10, y, 30, 30);
                    mainPanel.add(checkBox);
                    mainPanel.repaint();
                    checkBoxs.add(checkBox);
                    checkBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            if (checkBox.isSelected()) {
                                int confirm = JOptionPane.showConfirmDialog(null, "Are you want to delete this Message??...");
                                if (confirm == 0) {
                                    MailController mailController = null;
                                    try {
                                        mailController = ServerConnector.getServerConnector().getMailController();
                                    } catch (NotBoundException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (MalformedURLException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (RemoteException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                    try {
                                        boolean deleteMail = mailController.deleteMail("Inbox", userName, allMail.getMailID());
                                        if (deleteMail) {
                                            System.out.println("mail Deleted");
                                            JOptionPane.showMessageDialog(null, "Mail Deleted...");
                                            refreshButton.doClick();
                                        }
                                    } catch (IOException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (NotBoundException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }

                        }
                    });

                    JLabel label = new JLabel();
                    label.setVisible(true);
                    label.setOpaque(false);
                    label.setFont(new java.awt.Font("Tahoma", 0, 14));
                    label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    label.setText(" " + allMail.getSenderName());
                    mainPanel.setLayout(null);
                    label.setBounds(53, y, 229, 30);
                    mainPanel.add(label);
                    mainPanel.repaint();
                    label.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            InboxMail inboxMail = new InboxMail(allMail, userNameLable.getText());
                            composeMailPanel.removeAll();
                            inboxMail.setSize(composeMailPanel.getSize());
                            composeMailPanel.add(inboxMail);
                            composeMailPanel.repaint();
                            composeMailPanel.revalidate();
                        }
                    });

                    JLabel label2 = new JLabel();
                    label2.setVisible(true);
                    label2.setOpaque(false);
                    label2.setFont(new java.awt.Font("Tahoma", 0, 14));
                    label2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    label2.setText(" " + allMail.getMailTopic());
                    mainPanel.setLayout(null);
                    label2.setBounds(300, y, 580, 30);
                    mainPanel.add(label2);
                    mainPanel.repaint();

                    JLabel label3 = new JLabel();

                    label3.setOpaque(false);
                    label3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    label3.setFont(new java.awt.Font("Tahoma", 0, 14));
                    label3.setVisible(false);
//                label3.setText(" " + allMail.getAttachmentPath());
                    label3.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\gmail-attachment-icons-128--1-.png")); // NOI18N
                    label3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    if (!allMail.getAttachmentPath().equals("")) {
                        label3.setVisible(true);
                    }
                    mainPanel.setLayout(null);
                    label3.setBounds(898, y, 62, 30);
                    mainPanel.add(label3);
                    mainPanel.repaint();

                    JLabel label4 = new JLabel();
                    label4.setVisible(true);
                    label4.setOpaque(false);
                    label4.setFont(new java.awt.Font("Tahoma", 0, 14));
                    label4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    label4.setText(" " + allMail.getMailSentDate());
                    mainPanel.setLayout(null);
                    label4.setBounds(978, y, 172, 30);
                    mainPanel.add(label4);
                    mainPanel.repaint();

                    count++;
                    multiply++;
                }

            }

        }

    }
//    }

    private void setSentAndDraft(ArrayList<MailDTO> allMails) {
        int count = 1;
        int multiply = 0;
//        int y = 20;
//        int mailCount = allMails.size();
//        if (mailCount>0) {
//            fromLabel1.setText();
//            topicLabel1.setText();
//            attachmentLabel1.setText();
//            mailSentDateLabel1.setText();
//        }
        if (allMails.isEmpty()) {
            JLabel label = new JLabel();
            label.setVisible(true);
            label.setOpaque(false);
            label.setFont(new java.awt.Font("Lucida Bright", 3, 19));
//            label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setText(" ooops... You have no " + nowInLabel.getText() + "s... ");
            mainPanel.setLayout(null);
            label.setBounds(10, 190, 1140, 70);
            mainPanel.add(label);
            mainPanel.repaint();
        } else {
            for (MailDTO allMail : allMails) {
//        for (int i = 0; i < 10; i++) {
                if (count <= 10) {
                    int y = 20 + 48 * multiply;
                    JCheckBox checkBox = new JCheckBox();
                    checkBox.setVisible(true);
//                checkBox.setText(allMail.getMailID());
                    mainPanel.setLayout(null);
                    checkBox.setBounds(10, y, 30, 30);
                    mainPanel.add(checkBox);
                    mainPanel.repaint();
                    checkBoxs.add(checkBox);
                    checkBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            if (nowInLabel.getText().equals("Sent Mail")) {
                                int confirm = JOptionPane.showConfirmDialog(null, "Are you want to delete this Message??...");
                                if (confirm == 0) {
                                    MailController mailController = null;
                                    try {
                                        mailController = ServerConnector.getServerConnector().getMailController();
                                    } catch (NotBoundException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (MalformedURLException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (RemoteException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                    try {
                                        boolean deleteMail = mailController.deleteMail("Sent", userName, allMail.getMailID());
                                        if (deleteMail) {
                                            System.out.println("mail Deleted");
                                            JOptionPane.showMessageDialog(null, "Mail Deleted...");
                                        }
                                    } catch (IOException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (NotBoundException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            } else {
                                int confirm = JOptionPane.showConfirmDialog(null, "Are you want to delete this Message??...");
                                if (confirm == 0) {
                                    MailController mailController = null;
                                    try {
                                        mailController = ServerConnector.getServerConnector().getMailController();
                                    } catch (NotBoundException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (MalformedURLException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (RemoteException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                    try {
                                        boolean deleteMail = mailController.deleteMail("Draft", userName, allMail.getMailID());
                                        if (deleteMail) {
                                            System.out.println("mail Deleted");
                                            JOptionPane.showMessageDialog(null, "Mail Deleted...");
                                        }
                                    } catch (IOException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (NotBoundException ex) {
                                        Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                        }
                    });

                    JLabel label = new JLabel();
                    label.setVisible(true);
                    label.setOpaque(false);
                    label.setFont(new java.awt.Font("Tahoma", 0, 14));
                    label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    label.setText(" " + allMail.getReceiverName());
                    mainPanel.setLayout(null);
                    label.setBounds(53, y, 229, 30);
                    mainPanel.add(label);
                    mainPanel.repaint();
                    label.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            if (nowInLabel.getText().equals("Sent Mail")) {
                                DraftAndSendMail draftAndSendMail = new DraftAndSendMail(allMail, nowInLabel.getText());
                                composeMailPanel.removeAll();
                                draftAndSendMail.setSize(composeMailPanel.getSize());
                                composeMailPanel.add(draftAndSendMail);
                                composeMailPanel.repaint();
                                composeMailPanel.revalidate();
                            } else {
                                String systemDate = date.getText();
                                String systemTime = timeLabel.getText();
                                ComposedMail composedMail = new ComposedMail(allMail, userName, systemDate, systemTime);
                                composeMailPanel.removeAll();
                                composedMail.setSize(composeMailPanel.getSize());
                                composeMailPanel.add(composedMail);
                                composeMailPanel.repaint();
                                composeMailPanel.revalidate();
                            }
                        }
                    });

                    JLabel label2 = new JLabel();
                    label2.setVisible(true);
                    label2.setOpaque(false);
                    label2.setFont(new java.awt.Font("Tahoma", 0, 14));
                    label2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    label2.setText(" " + allMail.getMailTopic());
                    mainPanel.setLayout(null);
                    label2.setBounds(300, y, 580, 30);
                    mainPanel.add(label2);
                    mainPanel.repaint();

                    JLabel label3 = new JLabel();

                    label3.setOpaque(false);
                    label3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    label3.setFont(new java.awt.Font("Tahoma", 0, 14));
                    label3.setVisible(false);
//                label3.setText(" " + allMail.getAttachmentPath());
                    label3.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\gmail-attachment-icons-128--1-.png")); // NOI18N
                    label3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    if (!allMail.getAttachmentPath().equals("")) {
                        label3.setVisible(true);
                    }
                    mainPanel.setLayout(null);
                    label3.setBounds(898, y, 62, 30);
                    mainPanel.add(label3);
                    mainPanel.repaint();

                    JLabel label4 = new JLabel();
                    label4.setVisible(true);
                    label4.setOpaque(false);
                    label4.setFont(new java.awt.Font("Tahoma", 0, 14));
                    label4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    label4.setText(" " + allMail.getMailSentDate());
                    mainPanel.setLayout(null);
                    label4.setBounds(978, y, 172, 30);
                    mainPanel.add(label4);
                    mainPanel.repaint();

                    count++;
                    multiply++;
                }
            }
        }
    }

    private boolean logInToUserSettings(String userPassword) {
        JPanel panel = new JPanel();

        JLabel label = new JLabel("Enter user password : ");
        JPasswordField pass = new JPasswordField(10);
        panel.add(label);
        panel.add(pass);
        String[] options = new String[]{"OK", "Cancel"};
        int option = JOptionPane.showOptionDialog(null, panel, "Log in to User Settings...",
                JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, options, options[1]);
        if (option == 0) // pressing OK button
        {
            char[] password = pass.getPassword();
            System.out.println("Your password is: " + new String(password));
            if (new String(password).equals(userPassword)) {
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    private void getInboxMails() {
        try {
            nowInLabel.setText("Inbox");
            mainPanel.removeAll();
            MailController mailController = ServerConnector.getServerConnector().getMailController();

            ArrayList<MailDTO> allaInboxMails = mailController.viewAllMailsToInbox(userName, "Inbox", "InboxFIle.txt");
            setToLables(allaInboxMails);
        } catch (NotBoundException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void update(String receivers) throws RemoteException {
        System.out.println(receivers);
        String[] mailReceivers = receivers.split(",");
        for (String mailReceiver : mailReceivers) {
            System.out.println(mailReceiver);
            if (this.userName.equalsIgnoreCase(mailReceiver)) {
                System.out.println("userName OK");
                int confirm = JOptionPane.showConfirmDialog(null, "Dear user you have received new mail. Are you want to refresh Inbox messages??");
                if (confirm == 0) {
//                    JOptionPane.showMessageDialog(null, "You have new mail from " + mailReceiver);
                    refreshButton.doClick();

                }
            }
        }
    }
}
