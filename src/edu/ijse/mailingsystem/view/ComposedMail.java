/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.mailingsystem.view;

import edu.ijse.mailingsystem.connector.ServerConnector;
import edu.ijse.mailingsystem.controller.MailController;
import edu.ijse.mailingsystem.controller.UserController;
import edu.ijse.mailingsystem.dto.MailDTO;
import edu.ijse.mailingsystem.dto.UserDTO;
import edu.ijse.mailingsystem.util.AttachmentController;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dulan
 */
public class ComposedMail extends javax.swing.JPanel {

    /**
     * Creates new form ComposedMail
     */
    String userName;
    String systemDate;
    String systemTime;
    MailDTO mail;

    public ComposedMail() {
        initComponents();
    }

    ComposedMail(String userName, String systemDate, String systemTime) {
        initComponents();
        this.userName = userName;
        this.systemDate = systemDate;
        this.systemTime = systemTime;
        contactsMailPanel.setVisible(false);
        loadContacts();
    }

    ComposedMail(MailDTO mail, String userName, String systemDate, String systemTime) {
        initComponents();
        this.userName = userName;
        this.systemDate = systemDate;
        this.systemTime = systemTime;
        this.mail = mail;
        contactsMailPanel.setVisible(false);
        setToLables(mail);
        eraseDraftMail(mail.getMailID(), "Draft");
        loadContacts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contactsMailPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        contactsTable2 = new javax.swing.JTable();
        nameTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        toText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        topicText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        contentText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        attachmentNameText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        draftButton = new javax.swing.JButton();
        attachmentLabel = new javax.swing.JLabel();
        attachmentPathLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        contacksLable = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        contactsTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Contact Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contactsTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contactsTable2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(contactsTable2);

        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        contactsMailPanel.add(jPanel4);

        add(contactsMailPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 260, 460));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("TO");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 53, 150, 30));

        toText.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        toText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toTextActionPerformed(evt);
            }
        });
        add(toText, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 380, 30));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Subject");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 140, 30));

        topicText.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        topicText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topicTextActionPerformed(evt);
            }
        });
        add(topicText, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 430, 30));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Content");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 131, 140, 30));

        closeLabel.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        closeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        closeLabel.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\invalid (1).png")); // NOI18N
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
        });
        add(closeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 11, 31, 31));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 517, 590, -1));

        contentText.setColumns(20);
        contentText.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        contentText.setRows(5);
        jScrollPane1.setViewportView(contentText);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 430, 270));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Attachment Name");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 140, 30));

        attachmentNameText.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        attachmentNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachmentNameTextActionPerformed(evt);
            }
        });
        add(attachmentNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 410, 430, 30));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Attachment Path");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 140, 30));

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        add(sendButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, 111, -1));

        draftButton.setText("Save as Draft");
        draftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                draftButtonActionPerformed(evt);
            }
        });
        add(draftButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 530, 123, -1));

        attachmentLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        attachmentLabel.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\gmail-attachment-icons-128--1-.png")); // NOI18N
        attachmentLabel.setText("Add Attachment");
        attachmentLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attachmentLabelMouseClicked(evt);
            }
        });
        add(attachmentLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 480, 140, 40));

        attachmentPathLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        attachmentPathLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(attachmentPathLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 450, 430, 30));

        jLabel6.setFont(new java.awt.Font("Vijaya", 1, 24)); // NOI18N
        jLabel6.setText("New Message");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 13, 132, 29));

        contacksLable.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        contacksLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        contacksLable.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\contactsss (1).png")); // NOI18N
        contacksLable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contacksLableMouseClicked(evt);
            }
        });
        add(contacksLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 50, 36, 30));

        jLabel7.setIcon(new javax.swing.ImageIcon("D:\\IJSE\\Project\\Second Sem Project\\MailingSystemClient\\src\\edu\\ijse\\mailingsystem\\image\\18185-hd-color-background-wall (1).jpg")); // NOI18N
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 570));
    }// </editor-fold>//GEN-END:initComponents

    private void topicTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topicTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_topicTextActionPerformed

    private void toTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toTextActionPerformed

    private void attachmentNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachmentNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attachmentNameTextActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed

        try {

            String mailID = "M00000";
            String senderName = userName;
            System.out.println(senderName);
            String receivers = toText.getText();
//            System.out.println(receivers);
            String[] receiversNames = receivers.split(",");
            for (String receiversName : receiversNames) {
                System.out.println(receiversName);
            }
            String mailContent = contentText.getText();
            String mailTopic = topicText.getText();
            String attachmentName = attachmentNameText.getText();
            String attachmentPath = attachmentPathLabel.getText();
            System.out.println(attachmentPath);
            String mailSentDate = systemDate;
            String mailSentTime = systemTime;
            byte[] attachmentByteArray = null;
            if (!attachmentPath.equals("")) {
                attachmentByteArray = new AttachmentController().saveAttachment(attachmentPath);
            }

//            if (attachmentFile == null) {
//                attachmentFile = new File(".//src/edu//ijse//mailingsystem//util//attachmentSavingFile");
//            }
            MailController mailController = null;
            try {
                mailController = ServerConnector.getServerConnector().getMailController();
            } catch (NotBoundException ex) {
                Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
            }

            MailDTO mail = new MailDTO(mailID, senderName, receiversNames, mailContent, mailTopic, attachmentName, attachmentPath, mailSentDate, mailSentTime, attachmentByteArray);

            System.out.println(mail.getMailID());
            System.out.println(mail.getSenderName());
            System.out.println(mail.getReceiversNames());
            System.out.println(mail.getMailContent());
            System.out.println(mail.getMailTopic());
            System.out.println(mail.getAttachmentName());
            System.out.println(mail.getAttachmentPath());
//            System.out.println(mail.getAttachmentFile());
            System.out.println("asdfgggggggggggggggggggggg");
            System.out.println(mail);
            boolean isSent = mailController.sendMail(mail);
            if (isSent) {
                System.out.println("MailOK");
                JOptionPane.showMessageDialog(null, "Mail Sent Successfully... ");
                this.setVisible(false);
            }

        } catch (IOException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_sendButtonActionPerformed

    private void attachmentLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attachmentLabelMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        File file = fileChooser.getSelectedFile();
        if (attachmentNameText.getText().equals("")) {
            attachmentNameText.setText(file.getName());
        }
        attachmentPathLabel.setText(file.getAbsolutePath());
    }//GEN-LAST:event_attachmentLabelMouseClicked

    private void draftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_draftButtonActionPerformed
        try {
            String mailID = "M00000";
            String senderName = userName;
            System.out.println(senderName);
            String receivers = toText.getText();
//            System.out.println(receivers);
            String[] receiversNames = receivers.split(",");
            for (String receiversName : receiversNames) {
                System.out.println(receiversName);
            }
            String mailContent = contentText.getText();
            String mailTopic = topicText.getText();
            String attachmentName = attachmentNameText.getText();
            String attachmentPath = attachmentPathLabel.getText();
            System.out.println(attachmentPath);
            String mailSentDate = systemDate;
            String mailSentTime = systemTime;
//            byte[] attachmentByteArray = new AttachmentController().saveAttachment(attachmentPath);
            byte[] attachmentByteArray = null;
            if (!attachmentPath.equals("")) {
                attachmentByteArray = new AttachmentController().saveAttachment(attachmentPath);
            }
            MailDTO mail = new MailDTO(mailID, senderName, receiversNames, mailContent, mailTopic, attachmentName, attachmentPath, mailSentDate, mailSentTime, attachmentByteArray);

            MailController mailController = ServerConnector.getServerConnector().getMailController();
            boolean isSaved = mailController.saveAsDraft(mail);

            if (isSaved) {
                System.out.println("Draft Saved Successfully");
                JOptionPane.showMessageDialog(null, "Message Saved Successfully... ");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_draftButtonActionPerformed

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
        int confirm = JOptionPane.showConfirmDialog(null, "Are you want to save mail as Draft??...");
        if (confirm == 0) {
            draftButton.doClick();
            this.setVisible(false);
        } else {
            this.setVisible(false);
        }

    }//GEN-LAST:event_closeLabelMouseClicked

    private void contacksLableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contacksLableMouseClicked
        contactsMailPanel.setVisible(true);
    }//GEN-LAST:event_contacksLableMouseClicked

    private void contactsTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contactsTable2MouseClicked
        DefaultTableModel defaultTableModel = (DefaultTableModel) contactsTable2.getModel();
        String userName = (String) defaultTableModel.getValueAt(contactsTable2.getSelectedRow(), contactsTable2.getSelectedColumn());
        userName = userName + ",";
        nameTextField.setText(nameTextField.getText() + userName);
    }//GEN-LAST:event_contactsTable2MouseClicked

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        toText.setText(nameTextField.getText());
        contactsMailPanel.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attachmentLabel;
    private javax.swing.JTextField attachmentNameText;
    private javax.swing.JLabel attachmentPathLabel;
    private javax.swing.JLabel closeLabel;
    private javax.swing.JLabel contacksLable;
    private javax.swing.JPanel contactsMailPanel;
    private javax.swing.JTable contactsTable;
    private javax.swing.JTable contactsTable1;
    private javax.swing.JTable contactsTable2;
    private javax.swing.JTextArea contentText;
    private javax.swing.JButton draftButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField toText;
    private javax.swing.JTextField topicText;
    // End of variables declaration//GEN-END:variables

    private void setToLables(MailDTO mail) {
        toText.setText(mail.getReceiverName());
        topicText.setText(mail.getMailTopic());
        contentText.setText(mail.getMailContent());
        attachmentNameText.setText(mail.getAttachmentName());
        attachmentPathLabel.setText(mail.getAttachmentPath());
        jLabel6.setText("Draft Mail");
    }

    private void eraseDraftMail(String mailID, String draft) {

        MailController mailController = null;
        try {
            mailController = ServerConnector.getServerConnector().getMailController();
        } catch (NotBoundException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            boolean isDeleted = mailController.deleteMail(draft, userName, mailID);
            if (isDeleted) {
                System.out.println("draft deleted");
            }
        } catch (IOException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadContacts() {
        try {
            UserController userController = ServerConnector.getServerConnector().getUserController();
            ArrayList<UserDTO> allUsers = userController.getAllUsers();

            DefaultTableModel defaultTableModel = (DefaultTableModel) contactsTable2.getModel();
            defaultTableModel.setRowCount(0);
            for (UserDTO user : allUsers) {
                System.out.println(user.getUserName());
                Object[] rowData = {user.getUserName()};
                defaultTableModel.addRow(rowData);
            }
            
        } catch (NotBoundException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ComposedMail.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
